/*********************************************
Generated by Intentor.Yamapper Class Generator
http://intentor.com.br/projects/yamapper/
*********************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Intentor.Examples.Model.Core.Entities;
using Intentor.Examples.Model.Data;
using Intentor.Examples.Model.Domain;
using Intentor.Utilities;
using Intentor.Yamapper;

namespace Intentor.Examples.Web.UserControls
{
    public partial class UcCliente : System.Web.UI.UserControl
    {
        #region Handlers

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!Page.IsPostBack)
            {
                this.LoadAll();
            }
        }

        protected void btnNovo_Click(object sender, EventArgs e)
        {
            this.Clear();
            this.ShowForm(true);
        }

        protected void btnCadastrar_Click(object sender, EventArgs e)
        {
            this.Create();
        }

        protected void btnSalvar_Click(object sender, EventArgs e)
        {
            this.Update();
        }

        protected void btnCancelar_Click(object sender, EventArgs e)
        {
            this.LoadAll();
        }

        #region GridView

        protected void grvDados_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
				((ImageButton)e.Row.FindControl("ibtnVer")).CommandArgument =
					((ImageButton)e.Row.FindControl("ibtnExcluir")).CommandArgument = e.Row.RowIndex.ToString();
            }
        }

        protected void grvDados_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            var id = this.grvDados.DataKeys[e.CommandArgument.Parse<short>()].Value.Parse<int>();

            switch (e.CommandName)
            {
                case "Ver":
                    {
                        this.LoadData(id);
                    }
                    break;

                case "Excluir":
                    {
                        try
                        {
							var biz = new ClienteBiz(new ClienteDao());
							biz.Delete(id);

                            ClientHelper.MessageBoxOverAjax("Registro excluído com sucesso.");

                            this.LoadAll();
                        }
                        catch (Exception ex)
                        {
							if (ex.Message.IndexOf("DELETE statement conflicted") > 0)
                            {
                                ClientHelper.MessageBoxOverAjax("O registro atual não pode ser excluído por estar relacionado a dados no sistema.\\nVerifique os relacionamentos e tente novamente.");
                            }
                            else
                            {
                                ClientHelper.MessageBoxOverAjax("Não foi possível excluir o registro.\\nPor favor tente novamente.");
                            }
                        }
                    }
                    break;
            }
        }

        #endregion

        #endregion

        #region Métodos

        private void ShowGrid()
        {
            this.dvGrid.Visible = true;
            this.dvForm.Visible = false;
        }

        private void ShowForm(bool forCreation)
        {
            this.dvGrid.Visible = false;
            this.dvForm.Visible = true;

            this.btnCadastrar.Visible = forCreation;
            this.btnSalvar.Visible = !forCreation;
        }

        private Cliente GetEntity()
        {
            Cliente obj;
			var biz = new ClienteBiz(new ClienteDao());
            var id = (this.hidIdObj.Value.IsNullOrEmpty() ? (int)-1 : this.hidIdObj.Value.Parse<int>());

            if (id > 0) obj = biz.GetById(id);
            else obj = new Cliente();
			obj.Nome = this.txtNome.Text;
			obj.DataCadastro = this.txtDataCadastro.Text.GetNullableObjectFor<DateTime>();
			obj.Informativos = this.txtInformativos.Text.Parse<bool>();

            //Preenchimento de dados específicos de cadastro.
            if (id < 0)
			{
				
			}
		
			return obj;
        }

        private void LoadAll()
        {
            this.ShowGrid();
            this.grvDados.DataBind();
        }

        private void LoadData(int id)
        {
            this.Clear();

			var biz = new ClienteBiz(new ClienteDao());
            var obj = biz .GetById(id);

            this.hidIdObj.Value = id.ToString();
			this.txtNome.Text = obj.Nome.ToString();
			this.txtDataCadastro.Text = obj.DataCadastro.ToString();
			this.txtInformativos.Text = obj.Informativos.ToString();

            this.ShowForm(false);
        }

        private void Create()
        {
            try
            {
				var biz = new ClienteBiz(new ClienteDao());
				
				/*
                //Primeiramente verifica se o registro já existe.
                if (biz.Exists(this.txt.Text))
                {
                    ClientHelper.MessageBoxOverAjax("Registro já existente.\\nPor favor, escolha outro nome.");
                }
                else
                {
				}
				*/
				
				biz.Create(this.GetEntity());

				ClientHelper.MessageBoxOverAjax("Registro cadastrado com sucesso");

				this.LoadAll();
            }
            catch (Exception ex)
            {
                ClientHelper.MessageBoxOverAjax("Não foi possível realizar o cadastro do registro.\\nPor favor tente novamente.");
            }           
        }

        private void Update()
        {
            try
            {
				var biz = new ClienteBiz(new ClienteDao());
                biz.Update(this.GetEntity());

                ClientHelper.MessageBoxOverAjax("Registro atualizado com sucesso");

                this.LoadAll();
            }
            catch (Exception ex)
            {
                ClientHelper.MessageBoxOverAjax("Não foi possível realizar a atualização do registro.\\nPor favor tente novamente.");
            }  
        }

        private void Clear()
        {
			this.hidIdObj.Value = String.Empty;
			this.txtNome.Text = String.Empty;
			this.txtDataCadastro.Text = String.Empty;
			this.txtInformativos.Text = String.Empty;
        }

        #endregion
    }
	
	#region ObjectDataSource

    /// <summary>
    /// ObjectDataSource da página.
    /// </summary>
    public class ClienteDataSource
    {
        private ClienteBiz _biz = new ClienteBiz(new ClienteDao());

        public int SelectCount()
        {
            return _biz.Count();
        }

        public List<Cliente> Select(int maximumRows, int startRowIndex)
        {
            return _biz.GetByCriteria(Criteria.Create().Offset(startRowIndex).Limit(maximumRows)).BindTo<Cliente>();
        }
    }

    #endregion
}